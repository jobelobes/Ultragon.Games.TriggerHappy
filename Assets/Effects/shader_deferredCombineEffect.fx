#include "shader.inc"

//NOTE Diffuse map is maintex

Texture2D _LightMap;

float2 _HalfPixel;

struct VertexInput
{
	float3 Position : 	POSITION0;
	float2 TexCoord : 	TEXCOORD0;
};

struct VertexOutput
{
	float4 Position : 	SV_POSITION;
	float2 TexCoord : 	TEXCOORD0;
};

VertexOutput VertexShaderFunction(VertexInput input)
{
	VertexOutput output;
	
	output.Position = float4(input.Position, 1);
	output.TexCoord = input.TexCoord - _HalfPixel;
	
	return output;
}

float4 PixelShaderFunction(VertexOutput input) : SV_TARGET
{
	//Grabbing the color sampled from the diffuse map pulled in from the material
	float3 diffuseColor = _MainTex.Sample(TextureSamplerClamp, input.TexCoord).rgb;
	
	//grabbing the light intensity from the light map that was generated by the normal map and the depth map
	float4 light = _LightMap.Sample(TextureSamplerClamp, input.TexCoord);
	float3 diffuseLight = light.rgb;
	float specularLight = light.a;
	
	return float4(diffuseColor * diffuseLight + specularLight, 1);
}

technique10 Technique1
{   
    pass P1
    {
        SetVertexShader( CompileShader( vs_4_0, VertexShaderFunction() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, PixelShaderFunction() ) );
    }
}